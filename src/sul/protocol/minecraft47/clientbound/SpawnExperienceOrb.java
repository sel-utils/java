/*
 * This file was automatically generated by sel-utils and
 * released under the GNU General Public License version 3.
 * 
 * License: https://github.com/sel-project/sel-utils/blob/master/LICENSE
 * Repository: https://github.com/sel-project/sel-utils
 * Generated from https://github.com/sel-project/sel-utils/blob/master/xml/protocol/minecraft47.xml
 */
package sul.protocol.minecraft47.clientbound;

import sul.utils.*;

public class SpawnExperienceOrb extends Packet {

	public static final int ID = (int)17;

	public static final boolean CLIENTBOUND = true;
	public static final boolean SERVERBOUND = false;

	@Override
	public int getId() {
		return ID;
	}

	public int entityId;
	public Tuples.IntXYZ position = new Tuples.IntXYZ();
	public short count;

	public SpawnExperienceOrb() {}

	public SpawnExperienceOrb(int entityId, Tuples.IntXYZ position, short count) {
		this.entityId = entityId;
		this.position = position;
		this.count = count;
	}

	@Override
	public int length() {
		return Buffer.varuintLength(entityId) + 15;
	}

	@Override
	public byte[] encode() {
		this._buffer = new byte[this.length()];
		this.writeVaruint(ID);
		this.writeVaruint(entityId);
		this.writeBigEndianInt(position.x); this.writeBigEndianInt(position.y); this.writeBigEndianInt(position.z);
		this.writeBigEndianShort(count);
		return this.getBuffer();
	}

	@Override
	public void decode(byte[] buffer) {
		this._buffer = buffer;
		this.readVaruint();
		entityId=this.readVaruint();
		position=new Tuples.IntXYZ(); position.x=readBigEndianInt(); position.y=readBigEndianInt(); position.z=readBigEndianInt();
		count=readBigEndianShort();
	}

	public static SpawnExperienceOrb fromBuffer(byte[] buffer) {
		SpawnExperienceOrb ret = new SpawnExperienceOrb();
		ret.decode(buffer);
		return ret;
	}

	@Override
	public String toString() {
		return "SpawnExperienceOrb(entityId: " + this.entityId + ", position: " + this.position.toString() + ", count: " + this.count + ")";
	}

}
