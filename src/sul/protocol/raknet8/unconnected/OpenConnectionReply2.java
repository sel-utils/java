/*
 * This file was automatically generated by sel-utils and
 * released under the GNU General Public License version 3.
 * 
 * License: https://github.com/sel-project/sel-utils/blob/master/LICENSE
 * Repository: https://github.com/sel-project/sel-utils
 * Generated from https://github.com/sel-project/sel-utils/blob/master/xml/protocol/raknet8.xml
 */
package sul.protocol.raknet8.unconnected;

import java.util.Arrays;

import sul.utils.*;

public class OpenConnectionReply2 extends Packet {

	public static final byte ID = (byte)8;

	public static final boolean CLIENTBOUND = true;
	public static final boolean SERVERBOUND = false;

	@Override
	public int getId() {
		return ID;
	}

	public byte[] magic = new byte[16];
	public long serverId;
	public sul.protocol.raknet8.types.Address clientAddress;
	public short mtuLength;
	public boolean security;

	public OpenConnectionReply2() {}

	public OpenConnectionReply2(byte[] magic, long serverId, sul.protocol.raknet8.types.Address clientAddress, short mtuLength, boolean security) {
		this.magic = magic;
		this.serverId = serverId;
		this.clientAddress = clientAddress;
		this.mtuLength = mtuLength;
		this.security = security;
	}

	@Override
	public int length() {
		return clientAddress.length() + 28;
	}

	@Override
	public byte[] encode() {
		this._buffer = new byte[this.length()];
		this.writeBigEndianByte(ID);
		this.writeBytes(magic);
		this.writeBigEndianLong(serverId);
		this.writeBytes(clientAddress.encode());
		this.writeBigEndianShort(mtuLength);
		this.writeBool(security);
		return this.getBuffer();
	}

	@Override
	public void decode(byte[] buffer) {
		this._buffer = buffer;
		readBigEndianByte();
		final int b1zl=16; magic=this.readBytes(b1zl);
		serverId=readBigEndianLong();
		clientAddress=new sul.protocol.raknet8.types.Address(); clientAddress._index=this._index; clientAddress.decode(this._buffer); this._index=clientAddress._index;
		mtuLength=readBigEndianShort();
		security=this.readBool();
	}

	public static OpenConnectionReply2 fromBuffer(byte[] buffer) {
		OpenConnectionReply2 ret = new OpenConnectionReply2();
		ret.decode(buffer);
		return ret;
	}

	@Override
	public String toString() {
		return "OpenConnectionReply2(magic: " + Arrays.toString(this.magic) + ", serverId: " + this.serverId + ", clientAddress: " + this.clientAddress.toString() + ", mtuLength: " + this.mtuLength + ", security: " + this.security + ")";
	}

}
