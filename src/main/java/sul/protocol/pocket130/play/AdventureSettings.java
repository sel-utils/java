/*
 * This file was automatically generated by sel-utils and
 * released under the MIT License.
 * 
 * License: https://github.com/sel-project/sel-utils/blob/master/LICENSE
 * Repository: https://github.com/sel-project/sel-utils
 * Generated from https://github.com/sel-project/sel-utils/blob/master/xml/protocol/pocket130.xml
 */
package sul.protocol.pocket130.play;

import sul.utils.*;

/**
 * Updates the world's settings and client's permissions.
 */
public class AdventureSettings extends Packet {

	public static final byte ID = (byte)55;

	public static final boolean CLIENTBOUND = true;
	public static final boolean SERVERBOUND = true;

	@Override
	public int getId() {
		return ID;
	}

	// flags
	public static final int IMMUTABLE_WORLD = 1;
	public static final int PVP_DISABLED = 2;
	public static final int PVM_DISABLED = 4;
	public static final int MVP_DISBALED = 8;
	public static final int EVP_DISABLED = 16;
	public static final int AUTO_JUMP = 32;
	public static final int ALLOW_FLIGHT = 64;
	public static final int NO_CLIP = 128;
	public static final int FLYING = 512;
	public static final int MUTED = 1024;

	// permissions
	public static final int BUILD_AND_MINE = 1;
	public static final int DOORS_AND_SWITCHES = 2;
	public static final int OPEN_CONTAINERS = 4;
	public static final int ATTACK_PLAYERS = 8;
	public static final int ATTACK_MOBS = 16;
	public static final int OP = 32;
	public static final int TELEPORT = 64;

	// permission level
	public static final int USER = 0;
	public static final int OPERATOR = 1;
	public static final int HOST = 2;
	public static final int AUTOMATION = 3;
	public static final int ADMIN = 4;

	public int flags;
	public int unknown1;
	public int permissions;
	public int permissionLevel;
	public long entityId;

	public AdventureSettings() {}

	public AdventureSettings(int flags, int unknown1, int permissions, int permissionLevel, long entityId) {
		this.flags = flags;
		this.unknown1 = unknown1;
		this.permissions = permissions;
		this.permissionLevel = permissionLevel;
		this.entityId = entityId;
	}

	@Override
	public int length() {
		return Buffer.varuintLength(flags) + Buffer.varuintLength(unknown1) + Buffer.varuintLength(permissions) + Buffer.varuintLength(permissionLevel) + Buffer.varlongLength(entityId) + 1;
	}

	@Override
	public byte[] encode() {
		this._buffer = new byte[this.length()];
		this.writeBigEndianByte(ID);
		this.writeVaruint(flags);
		this.writeVaruint(unknown1);
		this.writeVaruint(permissions);
		this.writeVaruint(permissionLevel);
		this.writeVarlong(entityId);
		return this.getBuffer();
	}

	@Override
	public void decode(byte[] buffer) {
		this._buffer = buffer;
		readBigEndianByte();
		flags=this.readVaruint();
		unknown1=this.readVaruint();
		permissions=this.readVaruint();
		permissionLevel=this.readVaruint();
		entityId=this.readVarlong();
	}

	public static AdventureSettings fromBuffer(byte[] buffer) {
		AdventureSettings ret = new AdventureSettings();
		ret.decode(buffer);
		return ret;
	}

	@Override
	public String toString() {
		return "AdventureSettings(flags: " + this.flags + ", unknown1: " + this.unknown1 + ", permissions: " + this.permissions + ", permissionLevel: " + this.permissionLevel + ", entityId: " + this.entityId + ")";
	}

}