/*
 * This file was automatically generated by sel-utils and
 * released under the MIT License.
 * 
 * License: https://github.com/sel-project/sel-utils/blob/master/LICENSE
 * Repository: https://github.com/sel-project/sel-utils
 * Generated from https://github.com/sel-project/sel-utils/blob/master/xml/protocol/raknet8.xml
 */
package sul.protocol.raknet8.unconnected;

import java.nio.charset.StandardCharsets;
import java.util.Arrays;

import sul.utils.*;

public class Pong extends Packet {

	public static final byte ID = (byte)28;

	public static final boolean CLIENTBOUND = true;
	public static final boolean SERVERBOUND = false;

	@Override
	public int getId() {
		return ID;
	}

	public long pingId;
	public long serverId;
	public byte[] magic = new byte[16];
	public String status;

	public Pong() {}

	public Pong(long pingId, long serverId, byte[] magic, String status) {
		this.pingId = pingId;
		this.serverId = serverId;
		this.magic = magic;
		this.status = status;
	}

	@Override
	public int length() {
		return status.getBytes(StandardCharsets.UTF_8).length + 35;
	}

	@Override
	public byte[] encode() {
		this._buffer = new byte[this.length()];
		this.writeBigEndianByte(ID);
		this.writeBigEndianLong(pingId);
		this.writeBigEndianLong(serverId);
		this.writeBytes(magic);
		byte[] crdv=status.getBytes(StandardCharsets.UTF_8); this.writeBigEndianShort((short)crdv.length); this.writeBytes(crdv);
		return this.getBuffer();
	}

	@Override
	public void decode(byte[] buffer) {
		this._buffer = buffer;
		readBigEndianByte();
		pingId=readBigEndianLong();
		serverId=readBigEndianLong();
		final int b1zl=16; magic=this.readBytes(b1zl);
		short bvcrdv=readBigEndianShort(); status=new String(this.readBytes(bvcrdv), StandardCharsets.UTF_8);
	}

	public static Pong fromBuffer(byte[] buffer) {
		Pong ret = new Pong();
		ret.decode(buffer);
		return ret;
	}

	@Override
	public String toString() {
		return "Pong(pingId: " + this.pingId + ", serverId: " + this.serverId + ", magic: " + Arrays.toString(this.magic) + ", status: " + this.status + ")";
	}

}