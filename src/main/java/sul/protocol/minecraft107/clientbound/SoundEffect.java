/*
 * This file was automatically generated by sel-utils and
 * released under the MIT License.
 * 
 * License: https://github.com/sel-project/sel-utils/blob/master/LICENSE
 * Repository: https://github.com/sel-project/sel-utils
 * Generated from https://github.com/sel-project/sel-utils/blob/master/xml/protocol/minecraft107.xml
 */
package sul.protocol.minecraft107.clientbound;

import sul.utils.*;

public class SoundEffect extends Packet {

	public static final int ID = (int)71;

	public static final boolean CLIENTBOUND = true;
	public static final boolean SERVERBOUND = false;

	@Override
	public int getId() {
		return ID;
	}

	public int soundId;
	public int category;
	public Tuples.IntXYZ position = new Tuples.IntXYZ();
	public float volume;
	public byte pitch;

	public SoundEffect() {}

	public SoundEffect(int soundId, int category, Tuples.IntXYZ position, float volume, byte pitch) {
		this.soundId = soundId;
		this.category = category;
		this.position = position;
		this.volume = volume;
		this.pitch = pitch;
	}

	@Override
	public int length() {
		return Buffer.varuintLength(soundId) + Buffer.varuintLength(category) + 19;
	}

	@Override
	public byte[] encode() {
		this._buffer = new byte[this.length()];
		this.writeVaruint(ID);
		this.writeVaruint(soundId);
		this.writeVaruint(category);
		this.writeBigEndianInt(position.x); this.writeBigEndianInt(position.y); this.writeBigEndianInt(position.z);
		this.writeBigEndianFloat(volume);
		this.writeBigEndianByte(pitch);
		return this.getBuffer();
	}

	@Override
	public void decode(byte[] buffer) {
		this._buffer = buffer;
		this.readVaruint();
		soundId=this.readVaruint();
		category=this.readVaruint();
		position=new Tuples.IntXYZ(); position.x=readBigEndianInt(); position.y=readBigEndianInt(); position.z=readBigEndianInt();
		volume=readBigEndianFloat();
		pitch=readBigEndianByte();
	}

	public static SoundEffect fromBuffer(byte[] buffer) {
		SoundEffect ret = new SoundEffect();
		ret.decode(buffer);
		return ret;
	}

	@Override
	public String toString() {
		return "SoundEffect(soundId: " + this.soundId + ", category: " + this.category + ", position: " + this.position.toString() + ", volume: " + this.volume + ", pitch: " + this.pitch + ")";
	}

}