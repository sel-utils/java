/*
 * This file was automatically generated by sel-utils and
 * released under the MIT License.
 * 
 * License: https://github.com/sel-project/sel-utils/blob/master/LICENSE
 * Repository: https://github.com/sel-project/sel-utils
 * Generated from https://github.com/sel-project/sel-utils/blob/master/xml/protocol/bedrock137.xml
 */
package sul.protocol.bedrock137.play;

import java.util.Arrays;

import sul.utils.*;

public class GameRulesChanged extends Packet {

	public static final int ID = (int)72;

	public static final boolean CLIENTBOUND = true;
	public static final boolean SERVERBOUND = false;

	@Override
	public int getId() {
		return ID;
	}

	public sul.protocol.bedrock137.types.Rule[] rules = new sul.protocol.bedrock137.types.Rule[0];

	public GameRulesChanged() {}

	public GameRulesChanged(sul.protocol.bedrock137.types.Rule[] rules) {
		this.rules = rules;
	}

	@Override
	public int length() {
		int length=Buffer.varuintLength(rules.length) + 2; for(sul.protocol.bedrock137.types.Rule cvzm:rules){ length+=cvzm.length(); } return length;
	}

	@Override
	public byte[] encode() {
		this._buffer = new byte[this.length()];
		this.writeVaruint(ID);
		this.writeVaruint((int)rules.length); for(sul.protocol.bedrock137.types.Rule cvzm:rules){ this.writeBytes(cvzm.encode()); }
		return this.getBuffer();
	}

	@Override
	public void decode(byte[] buffer) {
		this._buffer = buffer;
		this.readVaruint();
		int bjbv=this.readVaruint(); rules=new sul.protocol.bedrock137.types.Rule[bjbv]; for(int cvzm=0;cvzm<rules.length;cvzm++){ rules[cvzm]=new sul.protocol.bedrock137.types.Rule(); rules[cvzm]._index=this._index; rules[cvzm].decode(this._buffer); this._index=rules[cvzm]._index; }
	}

	public static GameRulesChanged fromBuffer(byte[] buffer) {
		GameRulesChanged ret = new GameRulesChanged();
		ret.decode(buffer);
		return ret;
	}

	@Override
	public String toString() {
		return "GameRulesChanged(rules: " + Arrays.deepToString(this.rules) + ")";
	}

}