/*
 * This file was automatically generated by sel-utils and
 * released under the MIT License.
 * 
 * License: https://github.com/sel-project/sel-utils/blob/master/LICENSE
 * Repository: https://github.com/sel-project/sel-utils
 * Generated from https://github.com/sel-project/sel-utils/blob/master/xml/protocol/bedrock137.xml
 */
package sul.protocol.bedrock137.play;

import java.nio.charset.StandardCharsets;
import java.util.Arrays;

import sul.utils.*;

public class PlayerSkin extends Packet {

	public static final int ID = (int)93;

	public static final boolean CLIENTBOUND = true;
	public static final boolean SERVERBOUND = false;

	@Override
	public int getId() {
		return ID;
	}

	public sul.protocol.bedrock137.types.McpeUuid uuid;
	public String skinId;
	public String skinName;
	public String unknown3;
	public byte[] skinData = new byte[0];
	public byte[] capeData = new byte[0];
	public String geometryModel;
	public byte[] geometryData = new byte[0];

	public PlayerSkin() {}

	public PlayerSkin(sul.protocol.bedrock137.types.McpeUuid uuid, String skinId, String skinName, String unknown3, byte[] skinData, byte[] capeData, String geometryModel, byte[] geometryData) {
		this.uuid = uuid;
		this.skinId = skinId;
		this.skinName = skinName;
		this.unknown3 = unknown3;
		this.skinData = skinData;
		this.capeData = capeData;
		this.geometryModel = geometryModel;
		this.geometryData = geometryData;
	}

	@Override
	public int length() {
		return uuid.length() + Buffer.varuintLength(skinId.getBytes(StandardCharsets.UTF_8).length) + skinId.getBytes(StandardCharsets.UTF_8).length + Buffer.varuintLength(skinName.getBytes(StandardCharsets.UTF_8).length) + skinName.getBytes(StandardCharsets.UTF_8).length + Buffer.varuintLength(unknown3.getBytes(StandardCharsets.UTF_8).length) + unknown3.getBytes(StandardCharsets.UTF_8).length + Buffer.varuintLength(skinData.length) + skinData.length + Buffer.varuintLength(capeData.length) + capeData.length + Buffer.varuintLength(geometryModel.getBytes(StandardCharsets.UTF_8).length) + geometryModel.getBytes(StandardCharsets.UTF_8).length + Buffer.varuintLength(geometryData.length) + geometryData.length + 2;
	}

	@Override
	public byte[] encode() {
		this._buffer = new byte[this.length()];
		this.writeVaruint(ID);
		this.writeBytes(uuid.encode());
		byte[] ctbl=skinId.getBytes(StandardCharsets.UTF_8); this.writeVaruint((int)ctbl.length); this.writeBytes(ctbl);
		byte[] ctb5bu=skinName.getBytes(StandardCharsets.UTF_8); this.writeVaruint((int)ctb5bu.length); this.writeBytes(ctb5bu);
		byte[] d5b9bm=unknown3.getBytes(StandardCharsets.UTF_8); this.writeVaruint((int)d5b9bm.length); this.writeBytes(d5b9bm);
		this.writeVaruint((int)skinData.length); this.writeBytes(skinData);
		this.writeVaruint((int)capeData.length); this.writeBytes(capeData);
		byte[] zvbvclbr=geometryModel.getBytes(StandardCharsets.UTF_8); this.writeVaruint((int)zvbvclbr.length); this.writeBytes(zvbvclbr);
		this.writeVaruint((int)geometryData.length); this.writeBytes(geometryData);
		return this.getBuffer();
	}

	@Override
	public void decode(byte[] buffer) {
		this._buffer = buffer;
		this.readVaruint();
		uuid=new sul.protocol.bedrock137.types.McpeUuid(); uuid._index=this._index; uuid.decode(this._buffer); this._index=uuid._index;
		int bvctbl=this.readVaruint(); skinId=new String(this.readBytes(bvctbl), StandardCharsets.UTF_8);
		int bvctb5bu=this.readVaruint(); skinName=new String(this.readBytes(bvctb5bu), StandardCharsets.UTF_8);
		int bvd5b9bm=this.readVaruint(); unknown3=new String(this.readBytes(bvd5b9bm), StandardCharsets.UTF_8);
		int bna5yr=this.readVaruint(); skinData=this.readBytes(bna5yr);
		int bncvyr=this.readVaruint(); capeData=this.readBytes(bncvyr);
		int bvzvbvcl=this.readVaruint(); geometryModel=new String(this.readBytes(bvzvbvcl), StandardCharsets.UTF_8);
		int bdb1djrf=this.readVaruint(); geometryData=this.readBytes(bdb1djrf);
	}

	public static PlayerSkin fromBuffer(byte[] buffer) {
		PlayerSkin ret = new PlayerSkin();
		ret.decode(buffer);
		return ret;
	}

	@Override
	public String toString() {
		return "PlayerSkin(uuid: " + this.uuid.toString() + ", skinId: " + this.skinId + ", skinName: " + this.skinName + ", unknown3: " + this.unknown3 + ", skinData: " + Arrays.toString(this.skinData) + ", capeData: " + Arrays.toString(this.capeData) + ", geometryModel: " + this.geometryModel + ", geometryData: " + Arrays.toString(this.geometryData) + ")";
	}

}