/*
 * This file was automatically generated by sel-utils and
 * released under the MIT License.
 * 
 * License: https://github.com/sel-project/sel-utils/blob/master/LICENSE
 * Repository: https://github.com/sel-project/sel-utils
 * Generated from https://github.com/sel-project/sel-utils/blob/master/xml/protocol/bedrock150.xml
 */
package sul.protocol.bedrock150.play;

import java.util.Arrays;

import sul.utils.*;

public class InventoryTransaction extends Packet {

	public static final int ID = (int)30;

	public static final boolean CLIENTBOUND = false;
	public static final boolean SERVERBOUND = true;

	@Override
	public int getId() {
		return ID;
	}

	public int type;
	public sul.protocol.bedrock150.types.InventoryAction[] actions = new sul.protocol.bedrock150.types.InventoryAction[0];

	public InventoryTransaction() {}

	public InventoryTransaction(int type, sul.protocol.bedrock150.types.InventoryAction[] actions) {
		this.type = type;
		this.actions = actions;
	}

	@Override
	public int length() {
		int length=Buffer.varuintLength(type) + Buffer.varuintLength(actions.length) + 1; for(sul.protocol.bedrock150.types.InventoryAction yna9c:actions){ length+=yna9c.length(); } return length;
	}

	@Override
	public byte[] encode() {
		return this.encodeImpl();
	}

	private byte[] encodeImpl() {
		this._buffer = new byte[this.length()];
		this.writeVaruint(ID);
		this.writeVaruint(type);
		this.writeVaruint((int)actions.length); for(sul.protocol.bedrock150.types.InventoryAction yna9c:actions){ this.writeBytes(yna9c.encode()); }
		return this.getBuffer();
	}

	@Override
	public void decode(byte[] buffer) {
		this._buffer = buffer;
		this.readVaruint();
		type=this.readVaruint();
		int bfdlbm=this.readVaruint(); actions=new sul.protocol.bedrock150.types.InventoryAction[bfdlbm]; for(int yna9c=0;yna9c<actions.length;yna9c++){ actions[yna9c]=new sul.protocol.bedrock150.types.InventoryAction(); actions[yna9c]._index=this._index; actions[yna9c].decode(this._buffer); this._index=actions[yna9c]._index; }
	}

	private byte[] remainingBuffer() {
		return java.util.Arrays.copyOfRange(this._buffer, this._index, this._buffer.length);
	}

	public static InventoryTransaction fromBuffer(byte[] buffer) {
		InventoryTransaction ret = new InventoryTransaction();
		ret.decode(buffer);
		return ret;
	}

	@Override
	public String toString() {
		return "InventoryTransaction(type: " + this.type + ", actions: " + Arrays.deepToString(this.actions) + ")";
	}

	public class Normal0 extends Packet {

		public static final int TYPE = (int)0;

		@Override
		public int getId() {
			return ID;
		}

		@Override
		public int length() {
			return 0;
		}

		@Override
		public byte[] encode() {
			byte[] _encode = encodeImpl();
			this._buffer = new byte[_encode.length + this.length()];
			this.writeBytes(_encode);
			return this.getBuffer();
		}

		@Override
		public void decode(byte[] buffer) {
			this._buffer = buffer;
		}

		public void decode() {
			this.decode(remainingBuffer());
		}

		@Override
		public String toString() {
			return "InventoryTransaction.Normal0()";
		}

	}

	public class Normal1 extends Packet {

		public static final int TYPE = (int)1;

		@Override
		public int getId() {
			return ID;
		}

		@Override
		public int length() {
			return 0;
		}

		@Override
		public byte[] encode() {
			byte[] _encode = encodeImpl();
			this._buffer = new byte[_encode.length + this.length()];
			this.writeBytes(_encode);
			return this.getBuffer();
		}

		@Override
		public void decode(byte[] buffer) {
			this._buffer = buffer;
		}

		public void decode() {
			this.decode(remainingBuffer());
		}

		@Override
		public String toString() {
			return "InventoryTransaction.Normal1()";
		}

	}

	public class UseItem extends Packet {

		public static final int TYPE = (int)2;

		@Override
		public int getId() {
			return ID;
		}

		// action type
		public static final int CLICK_BLOCK = (int)0;
		public static final int CLICK_AIR = (int)1;
		public static final int BREAK_BLOCK = (int)2;

		public int actionType;
		public sul.protocol.bedrock150.types.BlockPosition blockPosition;
		public int face;
		public int hotbarSlot;
		public sul.protocol.bedrock150.types.Slot item;
		public Tuples.FloatXYZ playerPosition = new Tuples.FloatXYZ();
		public Tuples.FloatXYZ clickPosition = new Tuples.FloatXYZ();

		public UseItem() {}

		public UseItem(int actionType, sul.protocol.bedrock150.types.BlockPosition blockPosition, int face, int hotbarSlot, sul.protocol.bedrock150.types.Slot item, Tuples.FloatXYZ playerPosition, Tuples.FloatXYZ clickPosition) {
			this.actionType = actionType;
			this.blockPosition = blockPosition;
			this.face = face;
			this.hotbarSlot = hotbarSlot;
			this.item = item;
			this.playerPosition = playerPosition;
			this.clickPosition = clickPosition;
		}

		@Override
		public int length() {
			return Buffer.varuintLength(actionType) + blockPosition.length() + Buffer.varintLength(face) + Buffer.varintLength(hotbarSlot) + item.length() + 24;
		}

		@Override
		public byte[] encode() {
			byte[] _encode = encodeImpl();
			this._buffer = new byte[_encode.length + this.length()];
			this.writeBytes(_encode);
			this.writeVaruint(actionType);
			this.writeBytes(blockPosition.encode());
			this.writeVarint(face);
			this.writeVarint(hotbarSlot);
			this.writeBytes(item.encode());
			this.writeLittleEndianFloat(playerPosition.x); this.writeLittleEndianFloat(playerPosition.y); this.writeLittleEndianFloat(playerPosition.z);
			this.writeLittleEndianFloat(clickPosition.x); this.writeLittleEndianFloat(clickPosition.y); this.writeLittleEndianFloat(clickPosition.z);
			return this.getBuffer();
		}

		@Override
		public void decode(byte[] buffer) {
			this._buffer = buffer;
			actionType=this.readVaruint();
			blockPosition=new sul.protocol.bedrock150.types.BlockPosition(); blockPosition._index=this._index; blockPosition.decode(this._buffer); this._index=blockPosition._index;
			face=this.readVarint();
			hotbarSlot=this.readVarint();
			item=new sul.protocol.bedrock150.types.Slot(); item._index=this._index; item.decode(this._buffer); this._index=item._index;
			playerPosition=new Tuples.FloatXYZ(); playerPosition.x=readLittleEndianFloat(); playerPosition.y=readLittleEndianFloat(); playerPosition.z=readLittleEndianFloat();
			clickPosition=new Tuples.FloatXYZ(); clickPosition.x=readLittleEndianFloat(); clickPosition.y=readLittleEndianFloat(); clickPosition.z=readLittleEndianFloat();
		}

		public void decode() {
			this.decode(remainingBuffer());
		}

		@Override
		public String toString() {
			return "InventoryTransaction.UseItem(actionType: " + this.actionType + ", blockPosition: " + this.blockPosition.toString() + ", face: " + this.face + ", hotbarSlot: " + this.hotbarSlot + ", item: " + this.item.toString() + ", playerPosition: " + this.playerPosition.toString() + ", clickPosition: " + this.clickPosition.toString() + ")";
		}

	}

	public class UseItemOnEntity extends Packet {

		public static final int TYPE = (int)3;

		@Override
		public int getId() {
			return ID;
		}

		// action type
		public static final int INTERACT = (int)0;
		public static final int ATTACK = (int)1;

		public long entityId;
		public int actionType;
		public int hotbarSlot;
		public sul.protocol.bedrock150.types.Slot item;
		public Tuples.FloatXYZ unknown4 = new Tuples.FloatXYZ();
		public Tuples.FloatXYZ unknown5 = new Tuples.FloatXYZ();

		public UseItemOnEntity() {}

		public UseItemOnEntity(long entityId, int actionType, int hotbarSlot, sul.protocol.bedrock150.types.Slot item, Tuples.FloatXYZ unknown4, Tuples.FloatXYZ unknown5) {
			this.entityId = entityId;
			this.actionType = actionType;
			this.hotbarSlot = hotbarSlot;
			this.item = item;
			this.unknown4 = unknown4;
			this.unknown5 = unknown5;
		}

		@Override
		public int length() {
			return Buffer.varlongLength(entityId) + Buffer.varuintLength(actionType) + Buffer.varintLength(hotbarSlot) + item.length() + 24;
		}

		@Override
		public byte[] encode() {
			byte[] _encode = encodeImpl();
			this._buffer = new byte[_encode.length + this.length()];
			this.writeBytes(_encode);
			this.writeVarlong(entityId);
			this.writeVaruint(actionType);
			this.writeVarint(hotbarSlot);
			this.writeBytes(item.encode());
			this.writeLittleEndianFloat(unknown4.x); this.writeLittleEndianFloat(unknown4.y); this.writeLittleEndianFloat(unknown4.z);
			this.writeLittleEndianFloat(unknown5.x); this.writeLittleEndianFloat(unknown5.y); this.writeLittleEndianFloat(unknown5.z);
			return this.getBuffer();
		}

		@Override
		public void decode(byte[] buffer) {
			this._buffer = buffer;
			entityId=this.readVarlong();
			actionType=this.readVaruint();
			hotbarSlot=this.readVarint();
			item=new sul.protocol.bedrock150.types.Slot(); item._index=this._index; item.decode(this._buffer); this._index=item._index;
			unknown4=new Tuples.FloatXYZ(); unknown4.x=readLittleEndianFloat(); unknown4.y=readLittleEndianFloat(); unknown4.z=readLittleEndianFloat();
			unknown5=new Tuples.FloatXYZ(); unknown5.x=readLittleEndianFloat(); unknown5.y=readLittleEndianFloat(); unknown5.z=readLittleEndianFloat();
		}

		public void decode() {
			this.decode(remainingBuffer());
		}

		@Override
		public String toString() {
			return "InventoryTransaction.UseItemOnEntity(entityId: " + this.entityId + ", actionType: " + this.actionType + ", hotbarSlot: " + this.hotbarSlot + ", item: " + this.item.toString() + ", unknown4: " + this.unknown4.toString() + ", unknown5: " + this.unknown5.toString() + ")";
		}

	}

	public class ReleaseItem extends Packet {

		public static final int TYPE = (int)4;

		@Override
		public int getId() {
			return ID;
		}

		// action type
		public static final int SHOOT_BOW = (int)0;
		public static final int CONSUME = (int)1;

		public int actionType;
		public int hotbarSlot;
		public sul.protocol.bedrock150.types.Slot item;
		public Tuples.FloatXYZ headPosition = new Tuples.FloatXYZ();

		public ReleaseItem() {}

		public ReleaseItem(int actionType, int hotbarSlot, sul.protocol.bedrock150.types.Slot item, Tuples.FloatXYZ headPosition) {
			this.actionType = actionType;
			this.hotbarSlot = hotbarSlot;
			this.item = item;
			this.headPosition = headPosition;
		}

		@Override
		public int length() {
			return Buffer.varuintLength(actionType) + Buffer.varintLength(hotbarSlot) + item.length() + 12;
		}

		@Override
		public byte[] encode() {
			byte[] _encode = encodeImpl();
			this._buffer = new byte[_encode.length + this.length()];
			this.writeBytes(_encode);
			this.writeVaruint(actionType);
			this.writeVarint(hotbarSlot);
			this.writeBytes(item.encode());
			this.writeLittleEndianFloat(headPosition.x); this.writeLittleEndianFloat(headPosition.y); this.writeLittleEndianFloat(headPosition.z);
			return this.getBuffer();
		}

		@Override
		public void decode(byte[] buffer) {
			this._buffer = buffer;
			actionType=this.readVaruint();
			hotbarSlot=this.readVarint();
			item=new sul.protocol.bedrock150.types.Slot(); item._index=this._index; item.decode(this._buffer); this._index=item._index;
			headPosition=new Tuples.FloatXYZ(); headPosition.x=readLittleEndianFloat(); headPosition.y=readLittleEndianFloat(); headPosition.z=readLittleEndianFloat();
		}

		public void decode() {
			this.decode(remainingBuffer());
		}

		@Override
		public String toString() {
			return "InventoryTransaction.ReleaseItem(actionType: " + this.actionType + ", hotbarSlot: " + this.hotbarSlot + ", item: " + this.item.toString() + ", headPosition: " + this.headPosition.toString() + ")";
		}

	}

}