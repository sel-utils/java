/*
 * This file was automatically generated by sel-utils and
 * released under the MIT License.
 * 
 * License: https://github.com/sel-project/sel-utils/blob/master/LICENSE
 * Repository: https://github.com/sel-project/sel-utils
 * Generated from https://github.com/sel-project/sel-utils/blob/master/xml/protocol/bedrock150.xml
 */
package sul.protocol.bedrock150.play;

import sul.utils.*;

/**
 * First MCPE packet sent after the establishment of the connection through raknet.
 * It contains informations about the player.
 */
public class Login extends Packet {

	public static final int ID = (int)1;

	public static final boolean CLIENTBOUND = false;
	public static final boolean SERVERBOUND = true;

	@Override
	public int getId() {
		return ID;
	}

	/**
	 * Version of the protocol used by the player.
	 */
	public int protocol = 150;

	/**
	 * Payload that contains 2 JWTs (with each length indicated by an unsigned little-endian
	 * 32-bits integer) with more informations about the player and its account.
	 */
	public sul.protocol.bedrock150.types.LoginBody body;

	public Login() {}

	public Login(int protocol, sul.protocol.bedrock150.types.LoginBody body) {
		this.protocol = protocol;
		this.body = body;
	}

	@Override
	public int length() {
		return body.length() + 5;
	}

	@Override
	public byte[] encode() {
		this._buffer = new byte[this.length()];
		this.writeVaruint(ID);
		this.writeBigEndianInt(protocol);
		this.writeBytes(body.encode());
		return this.getBuffer();
	}

	@Override
	public void decode(byte[] buffer) {
		this._buffer = buffer;
		this.readVaruint();
		protocol=readBigEndianInt();
		body=new sul.protocol.bedrock150.types.LoginBody(); body._index=this._index; body.decode(this._buffer); this._index=body._index;
	}

	public static Login fromBuffer(byte[] buffer) {
		Login ret = new Login();
		ret.decode(buffer);
		return ret;
	}

	@Override
	public String toString() {
		return "Login(protocol: " + this.protocol + ", body: " + this.body.toString() + ")";
	}

}