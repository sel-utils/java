/*
 * This file was automatically generated by sel-utils and
 * released under the GNU General Public License version 3.
 * 
 * License: https://github.com/sel-project/sel-utils/blob/master/LICENSE
 * Repository: https://github.com/sel-project/sel-utils
 * Generated from https://github.com/sel-project/sel-utils/blob/master/xml/protocol/pocket101.xml
 */
package sul.protocol.pocket101.play;

import java.util.Arrays;

import sul.utils.*;

/**
 * One ore more packet, each prefixed with their varuint-encoded length, compressed
 * with zlib's deflate algorithm.
 */
public class Batch extends Packet {

	public static final byte ID = (byte)6;

	public static final boolean CLIENTBOUND = true;
	public static final boolean SERVERBOUND = true;

	@Override
	public int getId() {
		return ID;
	}

	/**
	 * Compressed data.
	 * 
	 * Pseudo-code for decompression:
	 * <code>
	 * ubyte[] uncompressed = uncompress(batch.payload);
	 * int index = 0;
	 * while(index < uncompressed.length) {
	 *    int length = varuint.decode(uncompressed, &index);
	 *    if(length < uncompressed.length - index) {}
	 *       ubyte[] packet = uncompressed[0..length];
	 *       index += length;
	 *    }
	 * }
	 * </code>
	 * 
	 * Pseudo-code for compression:
	 * <code>
	 * ubyte[] payload;
	 * foreach(ubyte[] packet ; packets) {
	 *    payload.concat(varuint.encode(packet.length));
	 *    payload.concat(packet);
	 * }
	 * Batch batch = new Batch(compress(payload, Zlib.DEFLATE));
	 * </code>
	 */
	public byte[] data = new byte[0];

	public Batch() {}

	public Batch(byte[] data) {
		this.data = data;
	}

	@Override
	public int length() {
		return Buffer.varuintLength(data.length) + data.length + 1;
	}

	@Override
	public byte[] encode() {
		this._buffer = new byte[this.length()];
		this.writeBigEndianByte(ID);
		this.writeVaruint((int)data.length); this.writeBytes(data);
		return this.getBuffer();
	}

	@Override
	public void decode(byte[] buffer) {
		this._buffer = buffer;
		readBigEndianByte();
		int brde=this.readVaruint(); data=this.readBytes(brde);
	}

	public static Batch fromBuffer(byte[] buffer) {
		Batch ret = new Batch();
		ret.decode(buffer);
		return ret;
	}

	@Override
	public String toString() {
		return "Batch(data: " + Arrays.toString(this.data) + ")";
	}

}