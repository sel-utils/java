/*
 * This file was automatically generated by sel-utils and
 * released under the MIT License.
 * 
 * License: https://github.com/sel-project/sel-utils/blob/master/LICENSE
 * Repository: https://github.com/sel-project/sel-utils
 * Generated from https://github.com/sel-project/sel-utils/blob/master/xml/protocol/pocket113.xml
 */
package sul.protocol.pocket113.play;

import java.util.Arrays;

import sul.utils.*;

public class ClientboundMapItemData extends Packet {

	public static final byte ID = (byte)67;

	public static final boolean CLIENTBOUND = true;
	public static final boolean SERVERBOUND = false;

	@Override
	public int getId() {
		return ID;
	}

	// update
	public static final int TEXTURE = (int)2;
	public static final int DECORATIONS = (int)4;
	public static final int ENTITIES = (int)8;

	public long mapId;
	public int update;
	public byte scale;

	/**
	 * Colums and rows.
	 */
	public Tuples.IntXZ size = new Tuples.IntXZ();
	public Tuples.IntXZ offset = new Tuples.IntXZ();

	/**
	 * ARGB colours encoded as unsigned varints.
	 */
	public byte[] data = new byte[0];
	public sul.protocol.pocket113.types.Decoration[] decorations = new sul.protocol.pocket113.types.Decoration[0];

	public ClientboundMapItemData() {}

	public ClientboundMapItemData(long mapId, int update, byte scale, Tuples.IntXZ size, Tuples.IntXZ offset, byte[] data, sul.protocol.pocket113.types.Decoration[] decorations) {
		this.mapId = mapId;
		this.update = update;
		this.scale = scale;
		this.size = size;
		this.offset = offset;
		this.data = data;
		this.decorations = decorations;
	}

	@Override
	public int length() {
		int length=Buffer.varlongLength(mapId) + Buffer.varuintLength(update) + Buffer.varintLength(size.x) + Buffer.varintLength(size.z) + Buffer.varintLength(offset.x) + Buffer.varintLength(offset.z) + data.length + Buffer.varuintLength(decorations.length) + 2; for(sul.protocol.pocket113.types.Decoration zvbjdlbm:decorations){ length+=zvbjdlbm.length(); } return length;
	}

	@Override
	public byte[] encode() {
		this._buffer = new byte[this.length()];
		this.writeBigEndianByte(ID);
		this.writeVarlong(mapId);
		this.writeVaruint(update);
		if(update==2||update==4){ this.writeBigEndianByte(scale); }
		if(update==2){ this.writeVarint(size.x); this.writeVarint(size.z); }
		if(update==2){ this.writeVarint(offset.x); this.writeVarint(offset.z); }
		if(update==2){ this.writeBytes(data); }
		if(update==4){ this.writeVaruint((int)decorations.length); for(sul.protocol.pocket113.types.Decoration zvbjdlbm:decorations){ this.writeBytes(zvbjdlbm.encode()); } }
		return this.getBuffer();
	}

	@Override
	public void decode(byte[] buffer) {
		this._buffer = buffer;
		readBigEndianByte();
		mapId=this.readVarlong();
		update=this.readVaruint();
		if(update==2||update==4){ scale=readBigEndianByte(); }
		if(update==2){ size=new Tuples.IntXZ(); size.x=this.readVarint(); size.z=this.readVarint(); }
		if(update==2){ offset=new Tuples.IntXZ(); offset.x=this.readVarint(); offset.z=this.readVarint(); }
		if(update==2){ data=this.readBytes(this._buffer.length-this._index); }
		if(update==4){ int bry9yrb5=this.readVaruint(); decorations=new sul.protocol.pocket113.types.Decoration[bry9yrb5]; for(int zvbjdlbm=0;zvbjdlbm<decorations.length;zvbjdlbm++){ decorations[zvbjdlbm]=new sul.protocol.pocket113.types.Decoration(); decorations[zvbjdlbm]._index=this._index; decorations[zvbjdlbm].decode(this._buffer); this._index=decorations[zvbjdlbm]._index; } }
	}

	public static ClientboundMapItemData fromBuffer(byte[] buffer) {
		ClientboundMapItemData ret = new ClientboundMapItemData();
		ret.decode(buffer);
		return ret;
	}

	@Override
	public String toString() {
		return "ClientboundMapItemData(mapId: " + this.mapId + ", update: " + this.update + ", scale: " + this.scale + ", size: " + this.size.toString() + ", offset: " + this.offset.toString() + ", data: " + Arrays.toString(this.data) + ", decorations: " + Arrays.deepToString(this.decorations) + ")";
	}

}