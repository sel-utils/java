/*
 * This file was automatically generated by sel-utils and
 * released under the MIT License.
 * 
 * License: https://github.com/sel-project/sel-utils/blob/master/LICENSE
 * Repository: https://github.com/sel-project/sel-utils
 * Generated from https://github.com/sel-project/sel-utils/blob/master/xml/protocol/minecraft315.xml
 */
package sul.protocol.minecraft315.clientbound;

import java.nio.charset.StandardCharsets;
import java.util.UUID;

import sul.utils.*;

public class SpawnPainting extends Packet {

	public static final int ID = (int)4;

	public static final boolean CLIENTBOUND = true;
	public static final boolean SERVERBOUND = false;

	@Override
	public int getId() {
		return ID;
	}

	// direction
	public static final byte SOUTH = 0;
	public static final byte WEST = 1;
	public static final byte NORTH = 2;
	public static final byte EAST = 3;

	public int entityId;
	public UUID uuid;
	public String title;
	public long position;
	public byte direction;

	public SpawnPainting() {}

	public SpawnPainting(int entityId, UUID uuid, String title, long position, byte direction) {
		this.entityId = entityId;
		this.uuid = uuid;
		this.title = title;
		this.position = position;
		this.direction = direction;
	}

	@Override
	public int length() {
		return Buffer.varuintLength(entityId) + Buffer.varuintLength(title.getBytes(StandardCharsets.UTF_8).length) + title.getBytes(StandardCharsets.UTF_8).length + 26;
	}

	@Override
	public byte[] encode() {
		this._buffer = new byte[this.length()];
		this.writeVaruint(ID);
		this.writeVaruint(entityId);
		this.writeBigEndianLong(uuid.getLeastSignificantBits()); this.writeBigEndianLong(uuid.getMostSignificantBits());
		byte[] dlbu=title.getBytes(StandardCharsets.UTF_8); this.writeVaruint((int)dlbu.length); this.writeBytes(dlbu);
		this.writeBigEndianLong(position);
		this.writeBigEndianByte(direction);
		return this.getBuffer();
	}

	@Override
	public void decode(byte[] buffer) {
		this._buffer = buffer;
		this.readVaruint();
		entityId=this.readVaruint();
		long avaq=readBigEndianLong(); long vaq=readBigEndianLong(); uuid=new UUID(avaq,vaq);
		int bvdlbu=this.readVaruint(); title=new String(this.readBytes(bvdlbu), StandardCharsets.UTF_8);
		position=readBigEndianLong();
		direction=readBigEndianByte();
	}

	public static SpawnPainting fromBuffer(byte[] buffer) {
		SpawnPainting ret = new SpawnPainting();
		ret.decode(buffer);
		return ret;
	}

	@Override
	public String toString() {
		return "SpawnPainting(entityId: " + this.entityId + ", uuid: " + this.uuid.toString() + ", title: " + this.title + ", position: " + this.position + ", direction: " + this.direction + ")";
	}

}