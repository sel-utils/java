/*
 * This file was automatically generated by sel-utils and
 * released under the MIT License.
 * 
 * License: https://github.com/sel-project/sel-utils/blob/master/LICENSE
 * Repository: https://github.com/sel-project/sel-utils
 * Generated from https://github.com/sel-project/sel-utils/blob/master/xml/protocol/externalconsole2.xml
 */
package sul.protocol.externalconsole2.connected;

import java.nio.charset.StandardCharsets;

import sul.utils.*;

/**
 * Executes a command remotely if the server allows it. If not a Permission Denied
 * is sent back. A good implementation of the external console client should never
 * send this packet if remoteCommands field in Welcome.Accepted is not true.
 */
public class Command extends Packet {

	public static final byte ID = (byte)5;

	public static final boolean CLIENTBOUND = false;
	public static final boolean SERVERBOUND = true;

	@Override
	public int getId() {
		return ID;
	}

	/**
	 * Command to execute on the server.
	 */
	public String command;

	/**
	 * Identifier for the command that will be sent in ConsoleMessage.commandId if the
	 * command generates an output.
	 */
	public int commandId;

	public Command() {}

	public Command(String command, int commandId) {
		this.command = command;
		this.commandId = commandId;
	}

	@Override
	public int length() {
		return command.getBytes(StandardCharsets.UTF_8).length + 7;
	}

	@Override
	public byte[] encode() {
		this._buffer = new byte[this.length()];
		this.writeBigEndianByte(ID);
		byte[] y9bfz=command.getBytes(StandardCharsets.UTF_8); this.writeBigEndianShort((short)y9bfz.length); this.writeBytes(y9bfz);
		this.writeBigEndianInt(commandId);
		return this.getBuffer();
	}

	@Override
	public void decode(byte[] buffer) {
		this._buffer = buffer;
		readBigEndianByte();
		short bvy9bfz=readBigEndianShort(); command=new String(this.readBytes(bvy9bfz), StandardCharsets.UTF_8);
		commandId=readBigEndianInt();
	}

	public static Command fromBuffer(byte[] buffer) {
		Command ret = new Command();
		ret.decode(buffer);
		return ret;
	}

	@Override
	public String toString() {
		return "Command(command: " + this.command + ", commandId: " + this.commandId + ")";
	}

}