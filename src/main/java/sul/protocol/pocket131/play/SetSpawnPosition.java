/*
 * This file was automatically generated by sel-utils and
 * released under the MIT License.
 * 
 * License: https://github.com/sel-project/sel-utils/blob/master/LICENSE
 * Repository: https://github.com/sel-project/sel-utils
 * Generated from https://github.com/sel-project/sel-utils/blob/master/xml/protocol/pocket131.xml
 */
package sul.protocol.pocket131.play;

import sul.utils.*;

public class SetSpawnPosition extends Packet {

	public static final int ID = (int)43;

	public static final boolean CLIENTBOUND = true;
	public static final boolean SERVERBOUND = false;

	@Override
	public int getId() {
		return ID;
	}

	// type
	public static final int PLAYER_SPAWN = (int)0;
	public static final int WORLD_SPAWN = (int)1;

	public int type;
	public sul.protocol.pocket131.types.BlockPosition position;
	public boolean forced;

	public SetSpawnPosition() {}

	public SetSpawnPosition(int type, sul.protocol.pocket131.types.BlockPosition position, boolean forced) {
		this.type = type;
		this.position = position;
		this.forced = forced;
	}

	@Override
	public int length() {
		return Buffer.varintLength(type) + position.length() + 2;
	}

	@Override
	public byte[] encode() {
		this._buffer = new byte[this.length()];
		this.writeVaruint(ID);
		this.writeVarint(type);
		this.writeBytes(position.encode());
		this.writeBool(forced);
		return this.getBuffer();
	}

	@Override
	public void decode(byte[] buffer) {
		this._buffer = buffer;
		this.readVaruint();
		type=this.readVarint();
		position=new sul.protocol.pocket131.types.BlockPosition(); position._index=this._index; position.decode(this._buffer); this._index=position._index;
		forced=this.readBool();
	}

	public static SetSpawnPosition fromBuffer(byte[] buffer) {
		SetSpawnPosition ret = new SetSpawnPosition();
		ret.decode(buffer);
		return ret;
	}

	@Override
	public String toString() {
		return "SetSpawnPosition(type: " + this.type + ", position: " + this.position.toString() + ", forced: " + this.forced + ")";
	}

}