/*
 * This file was automatically generated by sel-utils and
 * released under the MIT License.
 * 
 * License: https://github.com/sel-project/sel-utils/blob/master/LICENSE
 * Repository: https://github.com/sel-project/sel-utils
 * Generated from https://github.com/sel-project/sel-utils/blob/master/xml/protocol/pocket133.xml
 */
package sul.protocol.pocket133.play;

import java.util.Arrays;

import sul.utils.*;

public class InventoryContent extends Packet {

	public static final int ID = (int)49;

	public static final boolean CLIENTBOUND = true;
	public static final boolean SERVERBOUND = false;

	@Override
	public int getId() {
		return ID;
	}

	public int window;
	public sul.protocol.pocket133.types.Slot[] slots = new sul.protocol.pocket133.types.Slot[0];

	public InventoryContent() {}

	public InventoryContent(int window, sul.protocol.pocket133.types.Slot[] slots) {
		this.window = window;
		this.slots = slots;
	}

	@Override
	public int length() {
		int length=Buffer.varuintLength(window) + Buffer.varuintLength(slots.length) + 1; for(sul.protocol.pocket133.types.Slot cxdm:slots){ length+=cxdm.length(); } return length;
	}

	@Override
	public byte[] encode() {
		this._buffer = new byte[this.length()];
		this.writeVaruint(ID);
		this.writeVaruint(window);
		this.writeVaruint((int)slots.length); for(sul.protocol.pocket133.types.Slot cxdm:slots){ this.writeBytes(cxdm.encode()); }
		return this.getBuffer();
	}

	@Override
	public void decode(byte[] buffer) {
		this._buffer = buffer;
		this.readVaruint();
		window=this.readVaruint();
		int bnbr=this.readVaruint(); slots=new sul.protocol.pocket133.types.Slot[bnbr]; for(int cxdm=0;cxdm<slots.length;cxdm++){ slots[cxdm]=new sul.protocol.pocket133.types.Slot(); slots[cxdm]._index=this._index; slots[cxdm].decode(this._buffer); this._index=slots[cxdm]._index; }
	}

	public static InventoryContent fromBuffer(byte[] buffer) {
		InventoryContent ret = new InventoryContent();
		ret.decode(buffer);
		return ret;
	}

	@Override
	public String toString() {
		return "InventoryContent(window: " + this.window + ", slots: " + Arrays.deepToString(this.slots) + ")";
	}

}