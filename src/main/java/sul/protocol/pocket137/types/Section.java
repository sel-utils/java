/*
 * This file was automatically generated by sel-utils and
 * released under the MIT License.
 * 
 * License: https://github.com/sel-project/sel-utils/blob/master/LICENSE
 * Repository: https://github.com/sel-project/sel-utils
 * Generated from https://github.com/sel-project/sel-utils/blob/master/xml/protocol/pocket137.xml
 */
package sul.protocol.pocket137.types;

import java.util.Arrays;

import sul.utils.*;

/**
 * Section of a chunk with informations about blocks and lights. The array of bytes
 * are always ordered `xzy`.
 */
public class Section extends Stream {

	public byte storageVersion = 0;
	public byte[] blockIds = new byte[4096];
	public byte[] blockMetas = new byte[2048];

	public Section() {}

	public Section(byte storageVersion, byte[] blockIds, byte[] blockMetas) {
		this.storageVersion = storageVersion;
		this.blockIds = blockIds;
		this.blockMetas = blockMetas;
	}

	@Override
	public int length() {
		return 6145;
	}

	@Override
	public byte[] encode() {
		this._buffer = new byte[this.length()];
		this.writeLittleEndianByte(storageVersion);
		this.writeBytes(blockIds);
		this.writeBytes(blockMetas);
		return this.getBuffer();
	}

	@Override
	public void decode(byte[] buffer) {
		this._buffer = buffer;
		storageVersion=readLittleEndianByte();
		final int bjbnsr=4096; blockIds=this.readBytes(bjbnsr);
		final int bjbntvym=2048; blockMetas=this.readBytes(bjbntvym);
	}

	@Override
	public String toString() {
		return "Section(storageVersion: " + this.storageVersion + ", blockIds: " + Arrays.toString(this.blockIds) + ", blockMetas: " + Arrays.toString(this.blockMetas) + ")";
	}


}