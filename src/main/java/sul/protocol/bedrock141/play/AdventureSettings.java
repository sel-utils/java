/*
 * This file was automatically generated by sel-utils and
 * released under the MIT License.
 * 
 * License: https://github.com/sel-project/sel-utils/blob/master/LICENSE
 * Repository: https://github.com/sel-project/sel-utils
 * Generated from https://github.com/sel-project/sel-utils/blob/master/xml/protocol/bedrock141.xml
 */
package sul.protocol.bedrock141.play;

import sul.utils.*;

public class AdventureSettings extends Packet {

	public static final int ID = (int)55;

	public static final boolean CLIENTBOUND = true;
	public static final boolean SERVERBOUND = true;

	@Override
	public int getId() {
		return ID;
	}

	// flags
	public static final int IMMUTABLE_WORLD = (int)1;
	public static final int PVP_DISABLED = (int)2;
	public static final int PVM_DISABLED = (int)4;
	public static final int MVP_DISBALED = (int)8;
	public static final int EVP_DISABLED = (int)16;
	public static final int AUTO_JUMP = (int)32;
	public static final int ALLOW_FLIGHT = (int)64;
	public static final int NO_CLIP = (int)128;
	public static final int FLYING = (int)512;
	public static final int MUTED = (int)1024;

	// permission level
	public static final int LEVEL_USER = (int)0;
	public static final int LEVEL_OPERATOR = (int)1;
	public static final int LEVEL_HOST = (int)2;
	public static final int LEVEL_AUTOMATION = (int)3;
	public static final int LEVEL_ADMIN = (int)4;

	// abilities
	public static final int BUILD_AND_MINE = (int)1;
	public static final int DOORS_AND_SWITCHES = (int)2;
	public static final int OPEN_CONTAINERS = (int)4;
	public static final int ATTACK_PLAYERS = (int)8;
	public static final int ATTACK_MOBS = (int)16;
	public static final int OP = (int)32;
	public static final int TELEPORT = (int)64;

	// player rank
	public static final int VISITOR = (int)0;
	public static final int MEMBER = (int)1;
	public static final int OPERATOR = (int)2;
	public static final int CUSTOM = (int)3;

	public int flags;
	public int permissionLevel;
	public int abilities;
	public int playerRank;
	public int customPermissions;
	public long entityId;

	public AdventureSettings() {}

	public AdventureSettings(int flags, int permissionLevel, int abilities, int playerRank, int customPermissions, long entityId) {
		this.flags = flags;
		this.permissionLevel = permissionLevel;
		this.abilities = abilities;
		this.playerRank = playerRank;
		this.customPermissions = customPermissions;
		this.entityId = entityId;
	}

	@Override
	public int length() {
		return Buffer.varuintLength(flags) + Buffer.varuintLength(permissionLevel) + Buffer.varuintLength(abilities) + Buffer.varuintLength(playerRank) + Buffer.varuintLength(customPermissions) + 9;
	}

	@Override
	public byte[] encode() {
		this._buffer = new byte[this.length()];
		this.writeVaruint(ID);
		this.writeVaruint(flags);
		this.writeVaruint(permissionLevel);
		this.writeVaruint(abilities);
		this.writeVaruint(playerRank);
		this.writeVaruint(customPermissions);
		this.writeLittleEndianLong(entityId);
		return this.getBuffer();
	}

	@Override
	public void decode(byte[] buffer) {
		this._buffer = buffer;
		this.readVaruint();
		flags=this.readVaruint();
		permissionLevel=this.readVaruint();
		abilities=this.readVaruint();
		playerRank=this.readVaruint();
		customPermissions=this.readVaruint();
		entityId=readLittleEndianLong();
	}

	public static AdventureSettings fromBuffer(byte[] buffer) {
		AdventureSettings ret = new AdventureSettings();
		ret.decode(buffer);
		return ret;
	}

	@Override
	public String toString() {
		return "AdventureSettings(flags: " + this.flags + ", permissionLevel: " + this.permissionLevel + ", abilities: " + this.abilities + ", playerRank: " + this.playerRank + ", customPermissions: " + this.customPermissions + ", entityId: " + this.entityId + ")";
	}

}