/*
 * This file was automatically generated by sel-utils and
 * released under the MIT License.
 * 
 * License: https://github.com/sel-project/sel-utils/blob/master/LICENSE
 * Repository: https://github.com/sel-project/sel-utils
 * Generated from https://github.com/sel-project/sel-utils/blob/master/xml/protocol/bedrock141.xml
 */
package sul.protocol.bedrock141.types;

import java.nio.charset.StandardCharsets;
import java.util.Arrays;

import sul.utils.*;

public class Enum extends Stream {

	public String name;
	public short[] valuesIndexes = new short[0];

	public Enum() {}

	public Enum(String name, short[] valuesIndexes) {
		this.name = name;
		this.valuesIndexes = valuesIndexes;
	}

	@Override
	public int length() {
		return Buffer.varuintLength(name.getBytes(StandardCharsets.UTF_8).length) + name.getBytes(StandardCharsets.UTF_8).length + Buffer.varuintLength(valuesIndexes.length) + valuesIndexes.length*2;
	}

	@Override
	public byte[] encode() {
		this._buffer = new byte[this.length()];
		byte[] bfz=name.getBytes(StandardCharsets.UTF_8); this.writeVaruint((int)bfz.length); this.writeBytes(bfz);
		this.writeVaruint((int)valuesIndexes.length); for(short dfdvs5zh:valuesIndexes){ this.writeLittleEndianShort(dfdvs5zh); }
		return this.getBuffer();
	}

	@Override
	public void decode(byte[] buffer) {
		this._buffer = buffer;
		int bvbfz=this.readVaruint(); name=new String(this.readBytes(bvbfz), StandardCharsets.UTF_8);
		int bzbvclzv=this.readVaruint(); valuesIndexes=new short[bzbvclzv]; for(int dfdvs5zh=0;dfdvs5zh<valuesIndexes.length;dfdvs5zh++){ valuesIndexes[dfdvs5zh]=readLittleEndianShort(); }
	}

	@Override
	public String toString() {
		return "Enum(name: " + this.name + ", valuesIndexes: " + Arrays.toString(this.valuesIndexes) + ")";
	}


}