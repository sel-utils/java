/*
 * This file was automatically generated by sel-utils and
 * released under the MIT License.
 * 
 * License: https://github.com/sel-project/sel-utils/blob/master/LICENSE
 * Repository: https://github.com/sel-project/sel-utils
 * Generated from https://github.com/sel-project/sel-utils/blob/master/xml/protocol/java338.xml
 */
package sul.protocol.java338.serverbound;

import sul.utils.*;

public class CraftRecipeRequest extends Packet {

	public static final int ID = (int)18;

	public static final boolean CLIENTBOUND = false;
	public static final boolean SERVERBOUND = true;

	@Override
	public int getId() {
		return ID;
	}

	public byte window;
	public int recipe;
	public boolean makeAll;

	public CraftRecipeRequest() {}

	public CraftRecipeRequest(byte window, int recipe, boolean makeAll) {
		this.window = window;
		this.recipe = recipe;
		this.makeAll = makeAll;
	}

	@Override
	public int length() {
		return Buffer.varuintLength(recipe) + 3;
	}

	@Override
	public byte[] encode() {
		this._buffer = new byte[this.length()];
		this.writeVaruint(ID);
		this.writeBigEndianByte(window);
		this.writeVaruint(recipe);
		this.writeBool(makeAll);
		return this.getBuffer();
	}

	@Override
	public void decode(byte[] buffer) {
		this._buffer = buffer;
		this.readVaruint();
		window=readBigEndianByte();
		recipe=this.readVaruint();
		makeAll=this.readBool();
	}

	public static CraftRecipeRequest fromBuffer(byte[] buffer) {
		CraftRecipeRequest ret = new CraftRecipeRequest();
		ret.decode(buffer);
		return ret;
	}

	@Override
	public String toString() {
		return "CraftRecipeRequest(window: " + this.window + ", recipe: " + this.recipe + ", makeAll: " + this.makeAll + ")";
	}

}