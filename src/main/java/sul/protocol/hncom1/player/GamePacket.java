/*
 * This file was automatically generated by sel-utils and
 * released under the GNU General Public License version 3.
 * 
 * License: https://github.com/sel-project/sel-utils/blob/master/LICENSE
 * Repository: https://github.com/sel-project/sel-utils
 * Generated from https://github.com/sel-project/sel-utils/blob/master/xml/protocol/hncom1.xml
 */
package sul.protocol.hncom1.player;

import java.util.Arrays;

import sul.utils.*;

/**
 * Sends data to client or handles data received from the client.
 */
public class GamePacket extends Packet {

	public static final byte ID = (byte)26;

	public static final boolean CLIENTBOUND = true;
	public static final boolean SERVERBOUND = true;

	@Override
	public int getId() {
		return ID;
	}

	public int hubId;

	/**
	 * Serialised packet ready to be encrypted or encapsulated and sent to the client when
	 * this packet is serverbound or packet already unencrypted and uncompressed ready
	 * to be handled by the node otherwise.
	 * 
	 * <h4>Format</h4>
	 * 
	 * <h5>Minecraft (serverbound)</h5>
	 * The packet is prefixed with a varuint-encoded 0 if the packet is not compressed
	 * or with the uncompressed packet's length encoded as a varuint if the packet is compressed.
	 * 
	 * <h5>Minecraft (clientbound)</h5>
	 * The packet is already unencrypted and uncompressed and ready to be handled as a
	 * serverbound packet.
	 * 
	 * <h5>Minecraft: Pocket Edition (serverbound)</h5>
	 * The packet is simply encoded (may be compressed in a Batch packet) and ready to
	 * be encapsulated using RakNet.
	 * 
	 * <h5>Minecraft: Pocket Edition (clientbound)</h5>
	 * The packet is already unencrypted and uncompressed if it was a Batch packet and
	 * ready to be handled as a serverbound packet.
	 */
	public byte[] packet = new byte[0];

	public GamePacket() {}

	public GamePacket(int hubId, byte[] packet) {
		this.hubId = hubId;
		this.packet = packet;
	}

	@Override
	public int length() {
		return Buffer.varuintLength(hubId) + packet.length + 1;
	}

	@Override
	public byte[] encode() {
		this._buffer = new byte[this.length()];
		this.writeBigEndianByte(ID);
		this.writeVaruint(hubId);
		this.writeBytes(packet);
		return this.getBuffer();
	}

	@Override
	public void decode(byte[] buffer) {
		this._buffer = buffer;
		readBigEndianByte();
		hubId=this.readVaruint();
		packet=this.readBytes(this._buffer.length-this._index);
	}

	public static GamePacket fromBuffer(byte[] buffer) {
		GamePacket ret = new GamePacket();
		ret.decode(buffer);
		return ret;
	}

	@Override
	public String toString() {
		return "GamePacket(hubId: " + this.hubId + ", packet: " + Arrays.toString(this.packet) + ")";
	}

}