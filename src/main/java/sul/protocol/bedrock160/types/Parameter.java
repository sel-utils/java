/*
 * This file was automatically generated by sel-utils and
 * released under the MIT License.
 * 
 * License: https://github.com/sel-project/sel-utils/blob/master/LICENSE
 * Repository: https://github.com/sel-project/sel-utils
 * Generated from https://github.com/sel-project/sel-utils/blob/master/xml/protocol/bedrock160.xml
 */
package sul.protocol.bedrock160.types;

import java.nio.charset.StandardCharsets;

import sul.utils.*;

public class Parameter extends Stream {

	// type
	public static final int VALID = (int)1048576;
	public static final int INT = (int)1;
	public static final int FLOAT = (int)2;
	public static final int MIXED = (int)3;
	public static final int TARGET = (int)4;
	public static final int STRING = (int)13;
	public static final int POSITION = (int)14;
	public static final int RAWTEXT = (int)17;
	public static final int TEXT = (int)19;
	public static final int JSON = (int)22;
	public static final int COMMAND = (int)29;
	public static final int ENUM = (int)2097152;
	public static final int TEMPLATE = (int)16777216;

	public String name;
	public int type;
	public boolean optional;

	public Parameter() {}

	public Parameter(String name, int type, boolean optional) {
		this.name = name;
		this.type = type;
		this.optional = optional;
	}

	@Override
	public int length() {
		return Buffer.varuintLength(name.getBytes(StandardCharsets.UTF_8).length) + name.getBytes(StandardCharsets.UTF_8).length + 5;
	}

	@Override
	public byte[] encode() {
		this._buffer = new byte[this.length()];
		byte[] bfz=name.getBytes(StandardCharsets.UTF_8); this.writeVaruint((int)bfz.length); this.writeBytes(bfz);
		this.writeLittleEndianInt(type);
		this.writeBool(optional);
		return this.getBuffer();
	}

	@Override
	public void decode(byte[] buffer) {
		this._buffer = buffer;
		int bvbfz=this.readVaruint(); name=new String(this.readBytes(bvbfz), StandardCharsets.UTF_8);
		type=readLittleEndianInt();
		optional=this.readBool();
	}

	@Override
	public String toString() {
		return "Parameter(name: " + this.name + ", type: " + this.type + ", optional: " + this.optional + ")";
	}


}