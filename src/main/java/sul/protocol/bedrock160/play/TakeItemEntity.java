/*
 * This file was automatically generated by sel-utils and
 * released under the MIT License.
 * 
 * License: https://github.com/sel-project/sel-utils/blob/master/LICENSE
 * Repository: https://github.com/sel-project/sel-utils
 * Generated from https://github.com/sel-project/sel-utils/blob/master/xml/protocol/bedrock160.xml
 */
package sul.protocol.bedrock160.play;

import sul.utils.*;

/**
 * Plays the collection animation and despawns the entity that has been collected.
 */
public class TakeItemEntity extends Packet {

	public static final int ID = (int)17;

	public static final boolean CLIENTBOUND = true;
	public static final boolean SERVERBOUND = false;

	@Override
	public int getId() {
		return ID;
	}

	/**
	 * Collected entity, usually an item entity or an arrow, that will float toward the
	 * collector and despawn.
	 */
	public long collected;

	/**
	 * Entity that collects, usually a player or another entity with an inventory.
	 */
	public long collector;

	public TakeItemEntity() {}

	public TakeItemEntity(long collected, long collector) {
		this.collected = collected;
		this.collector = collector;
	}

	@Override
	public int length() {
		return Buffer.varlongLength(collected) + Buffer.varlongLength(collector) + 1;
	}

	@Override
	public byte[] encode() {
		this._buffer = new byte[this.length()];
		this.writeVaruint(ID);
		this.writeVarlong(collected);
		this.writeVarlong(collector);
		return this.getBuffer();
	}

	@Override
	public void decode(byte[] buffer) {
		this._buffer = buffer;
		this.readVaruint();
		collected=this.readVarlong();
		collector=this.readVarlong();
	}

	public static TakeItemEntity fromBuffer(byte[] buffer) {
		TakeItemEntity ret = new TakeItemEntity();
		ret.decode(buffer);
		return ret;
	}

	@Override
	public String toString() {
		return "TakeItemEntity(collected: " + this.collected + ", collector: " + this.collector + ")";
	}

}