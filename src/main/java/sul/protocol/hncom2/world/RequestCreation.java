/*
 * This file was automatically generated by sel-utils and
 * released under the MIT License.
 * 
 * License: https://github.com/sel-project/sel-utils/blob/master/LICENSE
 * Repository: https://github.com/sel-project/sel-utils
 * Generated from https://github.com/sel-project/sel-utils/blob/master/xml/protocol/hncom2.xml
 */
package sul.protocol.hncom2.world;

import java.nio.charset.StandardCharsets;

import sul.utils.*;

public class RequestCreation extends Packet {

	public static final byte ID = (byte)35;

	public static final boolean CLIENTBOUND = true;
	public static final boolean SERVERBOUND = false;

	@Override
	public int getId() {
		return ID;
	}

	public String name;
	public byte dimension;
	public byte generator;
	public byte difficulty;
	public byte gamemode;
	public int seed;
	public int parent = -1;

	public RequestCreation() {}

	public RequestCreation(String name, byte dimension, byte generator, byte difficulty, byte gamemode, int seed, int parent) {
		this.name = name;
		this.dimension = dimension;
		this.generator = generator;
		this.difficulty = difficulty;
		this.gamemode = gamemode;
		this.seed = seed;
		this.parent = parent;
	}

	@Override
	public int length() {
		return Buffer.varuintLength(name.getBytes(StandardCharsets.UTF_8).length) + name.getBytes(StandardCharsets.UTF_8).length + Buffer.varintLength(seed) + Buffer.varintLength(parent) + 5;
	}

	@Override
	public byte[] encode() {
		this._buffer = new byte[this.length()];
		this.writeBigEndianByte(ID);
		byte[] bfz=name.getBytes(StandardCharsets.UTF_8); this.writeVaruint((int)bfz.length); this.writeBytes(bfz);
		this.writeBigEndianByte(dimension);
		this.writeBigEndianByte(generator);
		this.writeBigEndianByte(difficulty);
		this.writeBigEndianByte(gamemode);
		this.writeVarint(seed);
		this.writeVarint(parent);
		return this.getBuffer();
	}

	@Override
	public void decode(byte[] buffer) {
		this._buffer = buffer;
		readBigEndianByte();
		int bvbfz=this.readVaruint(); name=new String(this.readBytes(bvbfz), StandardCharsets.UTF_8);
		dimension=readBigEndianByte();
		generator=readBigEndianByte();
		difficulty=readBigEndianByte();
		gamemode=readBigEndianByte();
		seed=this.readVarint();
		parent=this.readVarint();
	}

	public static RequestCreation fromBuffer(byte[] buffer) {
		RequestCreation ret = new RequestCreation();
		ret.decode(buffer);
		return ret;
	}

	@Override
	public String toString() {
		return "RequestCreation(name: " + this.name + ", dimension: " + this.dimension + ", generator: " + this.generator + ", difficulty: " + this.difficulty + ", gamemode: " + this.gamemode + ", seed: " + this.seed + ", parent: " + this.parent + ")";
	}

}