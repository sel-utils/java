/*
 * This file was automatically generated by sel-utils and
 * released under the MIT License.
 * 
 * License: https://github.com/sel-project/sel-utils/blob/master/LICENSE
 * Repository: https://github.com/sel-project/sel-utils
 * Generated from https://github.com/sel-project/sel-utils/blob/master/xml/protocol/hncom2.xml
 */
package sul.protocol.hncom2.world;

import java.nio.charset.StandardCharsets;

import sul.utils.*;

public class Add extends Packet {

	public static final byte ID = (byte)31;

	public static final boolean CLIENTBOUND = false;
	public static final boolean SERVERBOUND = true;

	@Override
	public int getId() {
		return ID;
	}

	// dimension
	public static final byte OVERWORLD = 0;
	public static final byte NETHER = 1;
	public static final byte END = 2;

	// generator
	public static final byte DEFAULT = 0;
	public static final byte FLAT = 1;

	// difficulty
	public static final byte PEACEFUL = 0;
	public static final byte EASY = 1;
	public static final byte NORMAL = 2;
	public static final byte HARD = 3;
	public static final byte HARDCORE = 4;

	// gamemode
	public static final byte SURVIVAL = 0;
	public static final byte CREATIVE = 1;
	public static final byte ADVENTURE = 2;
	public static final byte SPECTATOR = 3;

	public int worldId;
	public String name;
	public byte dimension;
	public byte generator;
	public byte difficulty;
	public byte gamemode;
	public Tuples.IntXZ spawnPoint = new Tuples.IntXZ();
	public short time;
	public int seed;
	public int parent = -1;

	public Add() {}

	public Add(int worldId, String name, byte dimension, byte generator, byte difficulty, byte gamemode, Tuples.IntXZ spawnPoint, short time, int seed, int parent) {
		this.worldId = worldId;
		this.name = name;
		this.dimension = dimension;
		this.generator = generator;
		this.difficulty = difficulty;
		this.gamemode = gamemode;
		this.spawnPoint = spawnPoint;
		this.time = time;
		this.seed = seed;
		this.parent = parent;
	}

	@Override
	public int length() {
		return Buffer.varuintLength(worldId) + Buffer.varuintLength(name.getBytes(StandardCharsets.UTF_8).length) + name.getBytes(StandardCharsets.UTF_8).length + Buffer.varintLength(spawnPoint.x) + Buffer.varintLength(spawnPoint.z) + Buffer.varintLength(seed) + Buffer.varintLength(parent) + 7;
	}

	@Override
	public byte[] encode() {
		this._buffer = new byte[this.length()];
		this.writeBigEndianByte(ID);
		this.writeVaruint(worldId);
		byte[] bfz=name.getBytes(StandardCharsets.UTF_8); this.writeVaruint((int)bfz.length); this.writeBytes(bfz);
		this.writeBigEndianByte(dimension);
		this.writeBigEndianByte(generator);
		this.writeBigEndianByte(difficulty);
		this.writeBigEndianByte(gamemode);
		this.writeVarint(spawnPoint.x); this.writeVarint(spawnPoint.z);
		this.writeBigEndianShort(time);
		this.writeVarint(seed);
		this.writeVarint(parent);
		return this.getBuffer();
	}

	@Override
	public void decode(byte[] buffer) {
		this._buffer = buffer;
		readBigEndianByte();
		worldId=this.readVaruint();
		int bvbfz=this.readVaruint(); name=new String(this.readBytes(bvbfz), StandardCharsets.UTF_8);
		dimension=readBigEndianByte();
		generator=readBigEndianByte();
		difficulty=readBigEndianByte();
		gamemode=readBigEndianByte();
		spawnPoint=new Tuples.IntXZ(); spawnPoint.x=this.readVarint(); spawnPoint.z=this.readVarint();
		time=readBigEndianShort();
		seed=this.readVarint();
		parent=this.readVarint();
	}

	public static Add fromBuffer(byte[] buffer) {
		Add ret = new Add();
		ret.decode(buffer);
		return ret;
	}

	@Override
	public String toString() {
		return "Add(worldId: " + this.worldId + ", name: " + this.name + ", dimension: " + this.dimension + ", generator: " + this.generator + ", difficulty: " + this.difficulty + ", gamemode: " + this.gamemode + ", spawnPoint: " + this.spawnPoint.toString() + ", time: " + this.time + ", seed: " + this.seed + ", parent: " + this.parent + ")";
	}

}