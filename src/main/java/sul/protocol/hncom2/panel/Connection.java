/*
 * This file was automatically generated by sel-utils and
 * released under the GNU General Public License version 3.
 * 
 * License: https://github.com/sel-project/sel-utils/blob/master/LICENSE
 * Repository: https://github.com/sel-project/sel-utils
 * Generated from https://github.com/sel-project/sel-utils/blob/master/xml/protocol/hncom2.xml
 */
package sul.protocol.hncom2.panel;

import java.util.Arrays;

import sul.utils.*;

public class Connection extends Packet {

	public static final byte ID = (byte)36;

	public static final boolean CLIENTBOUND = true;
	public static final boolean SERVERBOUND = false;

	@Override
	public int getId() {
		return ID;
	}

	public byte[] hash = new byte[64];
	public byte[] address = new byte[0];
	public int worldId;

	public Connection() {}

	public Connection(byte[] hash, byte[] address, int worldId) {
		this.hash = hash;
		this.address = address;
		this.worldId = worldId;
	}

	@Override
	public int length() {
		return Buffer.varuintLength(address.length) + address.length + Buffer.varuintLength(worldId) + 65;
	}

	@Override
	public byte[] encode() {
		this._buffer = new byte[this.length()];
		this.writeBigEndianByte(ID);
		this.writeBytes(hash);
		this.writeVaruint((int)address.length); this.writeBytes(address);
		this.writeVaruint(worldId);
		return this.getBuffer();
	}

	@Override
	public void decode(byte[] buffer) {
		this._buffer = buffer;
		readBigEndianByte();
		final int bhcg=64; hash=this.readBytes(bhcg);
		int bfzjcm=this.readVaruint(); address=this.readBytes(bfzjcm);
		worldId=this.readVaruint();
	}

	public static Connection fromBuffer(byte[] buffer) {
		Connection ret = new Connection();
		ret.decode(buffer);
		return ret;
	}

	@Override
	public String toString() {
		return "Connection(hash: " + Arrays.toString(this.hash) + ", address: " + Arrays.toString(this.address) + ", worldId: " + this.worldId + ")";
	}

}