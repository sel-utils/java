/*
 * This file was automatically generated by sel-utils and
 * released under the GNU General Public License version 3.
 * 
 * License: https://github.com/sel-project/sel-utils/blob/master/LICENSE
 * Repository: https://github.com/sel-project/sel-utils
 * Generated from https://github.com/sel-project/sel-utils/blob/master/xml/protocol/hncom2.xml
 */
package sul.protocol.hncom2.util;

import java.util.Arrays;

import sul.utils.*;

public class Compressed extends Packet {

	public static final byte ID = (byte)2;

	public static final boolean CLIENTBOUND = true;
	public static final boolean SERVERBOUND = true;

	@Override
	public int getId() {
		return ID;
	}

	public int size;
	public byte[] payload = new byte[0];

	public Compressed() {}

	public Compressed(int size, byte[] payload) {
		this.size = size;
		this.payload = payload;
	}

	@Override
	public int length() {
		return Buffer.varuintLength(size) + payload.length + 1;
	}

	@Override
	public byte[] encode() {
		this._buffer = new byte[this.length()];
		this.writeBigEndianByte(ID);
		this.writeVaruint(size);
		this.writeBytes(payload);
		return this.getBuffer();
	}

	@Override
	public void decode(byte[] buffer) {
		this._buffer = buffer;
		readBigEndianByte();
		size=this.readVaruint();
		payload=this.readBytes(this._buffer.length-this._index);
	}

	public static Compressed fromBuffer(byte[] buffer) {
		Compressed ret = new Compressed();
		ret.decode(buffer);
		return ret;
	}

	@Override
	public String toString() {
		return "Compressed(size: " + this.size + ", payload: " + Arrays.toString(this.payload) + ")";
	}

}
