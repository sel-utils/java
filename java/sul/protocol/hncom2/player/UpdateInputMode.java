/*
 * This file was automatically generated by sel-utils and
 * released under the GNU General Public License version 3.
 * 
 * License: https://github.com/sel-project/sel-utils/blob/master/LICENSE
 * Repository: https://github.com/sel-project/sel-utils
 * Generated from https://github.com/sel-project/sel-utils/blob/master/xml/protocol/hncom2.xml
 */
package sul.protocol.hncom2.player;

import sul.utils.*;

/**
 * Update the player's current input mode.
 */
public class UpdateInputMode extends Packet {

	public static final byte ID = (byte)26;

	public static final boolean CLIENTBOUND = true;
	public static final boolean SERVERBOUND = false;

	@Override
	public int getId() {
		return ID;
	}

	// input mode
	public static final byte KEYBOARD = 0;
	public static final byte TOUCH = 1;
	public static final byte CONTROLLER = 2;

	public int hubId;

	/**
	 * Player's input mode.
	 */
	public byte inputMode;

	public UpdateInputMode() {}

	public UpdateInputMode(int hubId, byte inputMode) {
		this.hubId = hubId;
		this.inputMode = inputMode;
	}

	@Override
	public int length() {
		return Buffer.varuintLength(hubId) + 2;
	}

	@Override
	public byte[] encode() {
		this._buffer = new byte[this.length()];
		this.writeBigEndianByte(ID);
		this.writeVaruint(hubId);
		this.writeBigEndianByte(inputMode);
		return this.getBuffer();
	}

	@Override
	public void decode(byte[] buffer) {
		this._buffer = buffer;
		readBigEndianByte();
		hubId=this.readVaruint();
		inputMode=readBigEndianByte();
	}

	public static UpdateInputMode fromBuffer(byte[] buffer) {
		UpdateInputMode ret = new UpdateInputMode();
		ret.decode(buffer);
		return ret;
	}

	@Override
	public String toString() {
		return "UpdateInputMode(hubId: " + this.hubId + ", inputMode: " + this.inputMode + ")";
	}

}
