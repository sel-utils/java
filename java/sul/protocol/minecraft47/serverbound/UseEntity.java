/*
 * This file was automatically generated by sel-utils and
 * released under the GNU General Public License version 3.
 * 
 * License: https://github.com/sel-project/sel-utils/blob/master/LICENSE
 * Repository: https://github.com/sel-project/sel-utils
 * Generated from https://github.com/sel-project/sel-utils/blob/master/xml/protocol/minecraft47.xml
 */
package sul.protocol.minecraft47.serverbound;

import sul.utils.*;

public class UseEntity extends Packet {

	public static final int ID = (int)2;

	public static final boolean CLIENTBOUND = false;
	public static final boolean SERVERBOUND = true;

	@Override
	public int getId() {
		return ID;
	}

	// type
	public static final int INTERACT = 0;
	public static final int ATTACK = 1;
	public static final int INTERACT_AT = 2;

	public int target;
	public int type;
	public Tuples.FloatXYZ targetPosition = new Tuples.FloatXYZ();

	public UseEntity() {}

	public UseEntity(int target, int type, Tuples.FloatXYZ targetPosition) {
		this.target = target;
		this.type = type;
		this.targetPosition = targetPosition;
	}

	@Override
	public int length() {
		return Buffer.varuintLength(target) + Buffer.varuintLength(type) + 13;
	}

	@Override
	public byte[] encode() {
		this._buffer = new byte[this.length()];
		this.writeVaruint(ID);
		this.writeVaruint(target);
		this.writeVaruint(type);
		if(type==2){ this.writeBigEndianFloat(targetPosition.x); this.writeBigEndianFloat(targetPosition.y); this.writeBigEndianFloat(targetPosition.z); }
		return this.getBuffer();
	}

	@Override
	public void decode(byte[] buffer) {
		this._buffer = buffer;
		this.readVaruint();
		target=this.readVaruint();
		type=this.readVaruint();
		if(type==2){ targetPosition=new Tuples.FloatXYZ(); targetPosition.x=readBigEndianFloat(); targetPosition.y=readBigEndianFloat(); targetPosition.z=readBigEndianFloat(); }
	}

	public static UseEntity fromBuffer(byte[] buffer) {
		UseEntity ret = new UseEntity();
		ret.decode(buffer);
		return ret;
	}

	@Override
	public String toString() {
		return "UseEntity(target: " + this.target + ", type: " + this.type + ", targetPosition: " + this.targetPosition.toString() + ")";
	}

}
