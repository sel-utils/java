/*
 * This file was automatically generated by sel-utils and
 * released under the MIT License.
 * 
 * License: https://github.com/sel-project/sel-utils/blob/master/LICENSE
 * Repository: https://github.com/sel-project/sel-utils
 * Generated from https://github.com/sel-project/sel-utils/blob/master/xml/protocol/hncom2.xml
 */
package sul.protocol.hncom.player;

import sul.utils.*;

/**
 * Transfers a player to another node. When a player is transferred from the node the
 * hub will not send the Remove packet and there's no way, for the node, to know whether
 * the player was disconnected or successfully transferred, if not using messages through
 * a user-defined protocol.
 */
public class Transfer extends Packet {

	public static final byte ID = (byte)20;

	public static final boolean CLIENTBOUND = false;
	public static final boolean SERVERBOUND = true;

	@Override
	public int getId() {
		return ID;
	}

	// on fail
	public static final byte DISCONNECT = (byte)0;
	public static final byte AUTO = (byte)1;
	public static final byte RECONNECT = (byte)2;

	public int hubId;

	/**
	 * Id of the node that player will be transferred to. It should be an id of a connected
	 * node (which can be calculated using AddNode and RemoveNode), otherwise the player
	 * will be disconnected or moved to another node (see the following field).
	 */
	public int node;

	/**
	 * Indicates the action to be taken when a transfer fails because the indicated node
	 * is not connected anymore or it cannot accept the given player's game type or protocol.
	 * If the indicated node is full the player will be simply disconnected with the `Server
	 * Full` message.
	 */
	public byte onFail;

	public Transfer() {}

	public Transfer(int hubId, int node, byte onFail) {
		this.hubId = hubId;
		this.node = node;
		this.onFail = onFail;
	}

	@Override
	public int length() {
		return Buffer.varuintLength(hubId) + Buffer.varuintLength(node) + 2;
	}

	@Override
	public byte[] encode() {
		this._buffer = new byte[this.length()];
		this.writeBigEndianByte(ID);
		this.writeVaruint(hubId);
		this.writeVaruint(node);
		this.writeBigEndianByte(onFail);
		return this.getBuffer();
	}

	@Override
	public void decode(byte[] buffer) {
		this._buffer = buffer;
		readBigEndianByte();
		hubId=this.readVaruint();
		node=this.readVaruint();
		onFail=readBigEndianByte();
	}

	public static Transfer fromBuffer(byte[] buffer) {
		Transfer ret = new Transfer();
		ret.decode(buffer);
		return ret;
	}

	@Override
	public String toString() {
		return "Transfer(hubId: " + this.hubId + ", node: " + this.node + ", onFail: " + this.onFail + ")";
	}

}