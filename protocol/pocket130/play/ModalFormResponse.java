/*
 * This file was automatically generated by sel-utils and
 * released under the MIT License.
 * 
 * License: https://github.com/sel-project/sel-utils/blob/master/LICENSE
 * Repository: https://github.com/sel-project/sel-utils
 * Generated from https://github.com/sel-project/sel-utils/blob/master/xml/protocol/pocket130.xml
 */
package sul.protocol.pocket130.play;

import java.nio.charset.StandardCharsets;

import sul.utils.*;

public class ModalFormResponse extends Packet {

	public static final byte ID = (byte)101;

	public static final boolean CLIENTBOUND = true;
	public static final boolean SERVERBOUND = false;

	@Override
	public int getId() {
		return ID;
	}

	public int formId;
	public String data;

	public ModalFormResponse() {}

	public ModalFormResponse(int formId, String data) {
		this.formId = formId;
		this.data = data;
	}

	@Override
	public int length() {
		return Buffer.varuintLength(formId) + Buffer.varuintLength(data.getBytes(StandardCharsets.UTF_8).length) + data.getBytes(StandardCharsets.UTF_8).length + 1;
	}

	@Override
	public byte[] encode() {
		this._buffer = new byte[this.length()];
		this.writeBigEndianByte(ID);
		this.writeVaruint(formId);
		byte[] zfy=data.getBytes(StandardCharsets.UTF_8); this.writeVaruint((int)zfy.length); this.writeBytes(zfy);
		return this.getBuffer();
	}

	@Override
	public void decode(byte[] buffer) {
		this._buffer = buffer;
		readBigEndianByte();
		formId=this.readVaruint();
		int bvzfy=this.readVaruint(); data=new String(this.readBytes(bvzfy), StandardCharsets.UTF_8);
	}

	public static ModalFormResponse fromBuffer(byte[] buffer) {
		ModalFormResponse ret = new ModalFormResponse();
		ret.decode(buffer);
		return ret;
	}

	@Override
	public String toString() {
		return "ModalFormResponse(formId: " + this.formId + ", data: " + this.data + ")";
	}

}