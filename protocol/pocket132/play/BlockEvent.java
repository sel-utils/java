/*
 * This file was automatically generated by sel-utils and
 * released under the MIT License.
 * 
 * License: https://github.com/sel-project/sel-utils/blob/master/LICENSE
 * Repository: https://github.com/sel-project/sel-utils
 * Generated from https://github.com/sel-project/sel-utils/blob/master/xml/protocol/pocket132.xml
 */
package sul.protocol.pocket132.play;

import java.util.Arrays;

import sul.utils.*;

public class BlockEvent extends Packet {

	public static final int ID = (int)26;

	public static final boolean CLIENTBOUND = true;
	public static final boolean SERVERBOUND = false;

	@Override
	public int getId() {
		return ID;
	}

	public sul.protocol.pocket132.types.BlockPosition position;
	public int[] data = new int[2];

	public BlockEvent() {}

	public BlockEvent(sul.protocol.pocket132.types.BlockPosition position, int[] data) {
		this.position = position;
		this.data = data;
	}

	@Override
	public int length() {
		int length=position.length() + 1; for(int zfy:data){ length+=Buffer.varintLength(zfy); } return length;
	}

	@Override
	public byte[] encode() {
		this._buffer = new byte[this.length()];
		this.writeVaruint(ID);
		this.writeBytes(position.encode());
		for(int zfy:data){ this.writeVarint(zfy); }
		return this.getBuffer();
	}

	@Override
	public void decode(byte[] buffer) {
		this._buffer = buffer;
		this.readVaruint();
		position=new sul.protocol.pocket132.types.BlockPosition(); position._index=this._index; position.decode(this._buffer); this._index=position._index;
		final int brde=2; data=new int[brde]; for(int zfy=0;zfy<data.length;zfy++){ data[zfy]=this.readVarint(); }
	}

	public static BlockEvent fromBuffer(byte[] buffer) {
		BlockEvent ret = new BlockEvent();
		ret.decode(buffer);
		return ret;
	}

	@Override
	public String toString() {
		return "BlockEvent(position: " + this.position.toString() + ", data: " + Arrays.toString(this.data) + ")";
	}

}